#lang racket


(require rackunit)
(require 2htdp/universe)
(require 2htdp/image)
(require "SBlockInterface.rkt")
(require "Constants.rkt")
(require "WidgetWorks.rkt")
(require "extras.rkt")

 
(provide
 SBlock%
 make-block)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The SBlock% class
;; A SBlock is a
;; (new SBlock% [sblock-x Int]
;;              [sblock-y Int]
;;   [block-selected? Boolean]
;;   [mouse-xcoordinate Int] [mouse-ycoordinate Int]
;;   [list-of-teammates ListOfSBlock]
;;   [list-of-neighbors ListOfBSlock] 

;; INTERPRETATION:
;; Represents a square block and 
;; sblock-x is x-coordinate of the center of block
;; sblock-y is y-coordinate of the center of block
;; block-selected? represents if any block is selected
;; mouse-xcoordinate and mouse-ycoordinate represent the mouse positions
;; list-of-neighbors represents the blocks of the adjacent blocks of the selected block
;; list-of-teammates represents the block of the teams in consideration.

(define SBlock%
  (class* object% (SBlock<%>)
    
    (field [SBLOCK-SIDE 20]) ;;Side length of block 
    (field [SBLOCK-SELECTED true]) ;;block selection is either true or false
    (field [SBLOCK-UNSELECTED false])
    (field [SBLOCK-SELECTED-COLOR "red"]) ;;block color when selected is red
    (field [SBLOCK-UNSELECTED-COLOR "green"]) ;;block color when selected is green
    (field [SBLOCK-MODE "outline"]) ;;block mode is outline when selected
    (field [HALF-SIDE (/ SBLOCK-SIDE 2)]) ;;Half side length of block
    
    
    
    (init-field
     sblock-xcoordinate ;;Initialising attributes for block's x and y coordinates
     sblock-ycoordinate)
    
    (init-field sblockno) ;;Initialising block number
    
    (init-field [block-selected? SBLOCK-UNSELECTED]) ;;Initialising block selection
    
    (init-field [mouse-xcoordinate -1] ;;Initialising mouse coordinates
                [mouse-ycoordinate -1])
    
    
    (init-field [list-of-teammates empty]) ;;Initialising list for teammates
    
    (init-field [list-of-neighbors empty]) ;;Initialising list for neighbors
    
    
    
    
    (super-new)
    
    
    ;; get-team : -> ListOfSBlock<%>
    ;; RETURNS: the teammates of this sblock
    
    (define/public (get-team) list-of-teammates)
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    ;; add-teammate: SBlock -> Void
    ;; EFFECT: adds the given sblock to this block's team
    (define/public (add-teammate teammate)
      (set! list-of-teammates (cons teammate list-of-teammates)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; sblock-x : -> Integer 
    ;; sblock-y : -> Integer
    ;; RETURNS: the x or y coordinates of this sblock
    (define/public (sblock-x) sblock-xcoordinate)
    (define/public (sblock-y) sblock-ycoordinate)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ;; get-sblock : -> Int
    ;; RETURNS : block number 
    (define/public (get-sblock) sblockno)
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; make-team : ListOfBlock<%> -> Void
    ; EFFECT : team is made
    (define/public (make-team list-of-blocks)
      (set! list-of-teammates (append list-of-teammates list-of-blocks)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; add-neighbor : SBlock<%> -> Void
    ; GIVEN : block to be added
    ; EFFECT: adding the new set of blocks to the selected block
    (define/public (add-neighbor sblock)
      (set! list-of-neighbors (append sblock list-of-neighbors)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    ;; after-tick :   -> Void
    ;; GIVEN:no arguements
    ;; EFFECT: updates this widget to the state it should have
    ;; following a tick.
    (define/public (after-tick) this) 
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
    
    ;; after-button-down :  Integer Integer -> Void
    ;; GIVEN: a location
    ;; EFFECT: updates this widget to the state it should have
    ;; following the specified mouse event at the given location.
    (define/public (after-button-down mx my)
      (if (inside-sblock? mx my)
          (begin
            (set! block-selected? SBLOCK-SELECTED)
            (set! mouse-xcoordinate (- mx sblock-xcoordinate))
            (set! mouse-ycoordinate (- my sblock-ycoordinate))) 
          this))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
    ;; inside-sblock? : Integer Integer -> Boolean
    ;; GIVEN : a location on the canvas
    ;; RETURNS : true iff the location of the mouse coordinates is inside this block
    
    (define (inside-sblock? mx my)
      (and
       (<= (- sblock-xcoordinate HALF-SIDE) mx (+ sblock-xcoordinate HALF-SIDE))
       (<= (- sblock-ycoordinate HALF-SIDE) my (+ sblock-ycoordinate HALF-SIDE))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      
    
    ;; after-move : Integer Integer -> Void
    ;; GIVEN: a location
    ;; EFFECT: updates this widget to the state it should have
    ;; following the specified mouse event at the given location.
    (define/public (after-move cursor-x cursor-y)
      (begin
        (set! mouse-xcoordinate cursor-x)
        (set! mouse-ycoordinate cursor-y))) 
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    ;; after-button-up :  Integer Integer -> Void
    ;; GIVEN: a location
    ;; EFFECT: updates this widget to the state it should have
    ;; following the specified mouse event at the given location.
    (define/public (after-button-up mx my)
      (if (inside-sblock? mx my)
          (set! block-selected? SBLOCK-UNSELECTED)
          this))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; after-drag :  Integer Integer -> Void
    ;; GIVEN: a location
    ;; EFFECT: updates this widget to the state it should have
    ;; following the specified mouse event at the given location.
    (define/public (after-drag mx my)
      (if block-selected?
          (let ((x sblock-xcoordinate)
                (y sblock-ycoordinate))
            (begin
              (set! sblock-xcoordinate (- mx mouse-xcoordinate))
              (set! sblock-ycoordinate (- my mouse-ycoordinate))
              (team-drag x y sblock-xcoordinate sblock-ycoordinate)
              (team-after-drag))) 
          this))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
    ;; team-drag : Int Int Int Int -> Void
    ;; GIVEN : x and y coordinates of selected block and the block 
    ;; which is to be in drag
    ;; EFFECT : block considered as teammate
    (define (team-drag x y x1 y1)
      (for-each
       (lambda (sblock)
         (send sblock block-after-drag x y x1 y1))
       list-of-teammates))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; block-after-drag : Int Int Int Int -> Void
    ;; GIVEN : x and y coordinates of selected block and the block
    ;; which is to be in drag
    ;; EFFECT : block considered as teammate
    (define/public  (block-after-drag x y x1 y1)
      (set! sblock-xcoordinate (+ x1 (- 0 (- x sblock-xcoordinate))))
      (set! sblock-ycoordinate (+ y1 (- 0 (- y sblock-ycoordinate)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
    ;; team-after-drag : -> Void
    ;; EFFECT : updates block in the team
    (define (team-after-drag)      
      (for-each
       ; SBlock<%> -> Void
       ; GIVEN: a block
       ; RETURNS: the updated block
       ; STRATEGY: Cases on whether the block
       ; overlaps the selected block
       (lambda (sblock)
         (if (check-overlapping? sblock)
             (add-processed-block sblock)
             sblock))                          
       list-of-neighbors))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; check-overlapping? : SBlock -> Boolean
    ;; GIVEN : x and y coordinates of block
    ;; RETURNS : true if the given block overlaps with the given block
    (define (check-overlapping? sblock)
      (and
       (<= (- SBLOCK-SIDE) (- sblock-xcoordinate (send sblock sblock-x)) SBLOCK-SIDE)
       (<= (- SBLOCK-SIDE) (- sblock-ycoordinate (send sblock sblock-y)) SBLOCK-SIDE)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; add-processed-block : SBlock<%> -> Void
    ;; EFFECT: sets processed block
    (define (add-processed-block other-sblock)
      (if  (add-block-in-selected-team? other-sblock)
           (let ((other-team (append (list other-sblock)(send other-sblock get-team)))
                 (team-this (append (list this) list-of-teammates)))
             (begin
               (update-team other-team team-this)
               (update-team team-this other-team)))        
           0)) 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; update-team : ListOfBlock  ListOfBlock -> Void
    ;; GIVEN : two teams
    ;; EFFECT : if the team are joined then it appends both as a single team.
    (define (update-team t1 t2)
      (for-each
       ; SBlock<%> -> Void
       ; GIVEN: a block
       ; EFFECT: block in the team to be added 
       (lambda (sblock) (send sblock make-team t2))
       t1))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; add-block-in-selected-team? : SBlock -> Boolean
    ;; GIVEN : block
    ;; RETURNS : true if the block is to be included in the team
    (define (add-block-in-selected-team? sblock)
      (not (block-within-selected-team? (send sblock get-sblock))))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; block-within-selected-team? : Int -> Boolean
    ;; GIVEN : block number
    ;; RETURNS : true if the block is in the team
    (define (block-within-selected-team? sblock)
      (ormap
       ; SBlock<%> -> Boolean
       ; GIVEN : block
       ; RETURNS : true if block number matches in the list
       (lambda (b) (equal? (send b get-sblock) sblock))
       list-of-teammates))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     
    
    
    ;; after-key-event : KeyEvent -> Void
    ;; GIVEN: a key event
    ;; EFFECT: updates this widget to the state it should have
    ;; following the given key event
    (define/public (after-key-event kev) this)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; for-test::block-selected : -> Boolean
    (define/public(for-test::block-selected?) block-selected?)
    ;; for-test::get-sblock : -> ListOfBlock
    (define/public(for-test::get-sblock) list-of-neighbors)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    
    ; add-to-scene : Scene -> Scene
    ; GIVEN: a scene
    ; RETURNS: a scene like the given one, but with this object
    ; painted on it.
    (define/public (add-to-scene scene)
      (place-image
       (square SBLOCK-SIDE "outline"
               (if block-selected? SBLOCK-SELECTED-COLOR SBLOCK-UNSELECTED-COLOR))
       sblock-xcoordinate sblock-ycoordinate scene)))) 


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    


;    make-block : NonNegInt NonNegInt ListOfBlock -> SBlock
;    GIVEN: an x and y position, and a list of blocks
;    WHERE: the list of blocks is the list of blocks already on the playground.
;    RETURNS: a new block, at the given position, with no teammates
(define (make-block x y list-of-sblocks)
  (new SBlock%
       [sblock-xcoordinate x] 
       [sblock-ycoordinate y]
       [sblockno (+ (length list-of-sblocks) 1)]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
;;TESTS :

(begin-for-test
  (local
    ((define block-1 (make-block CANVAS-HALF-WIDTH CANVAS-HALF-HEIGHT empty)))
    (check-equal?
     (send block-1 sblock-x)
     CANVAS-HALF-WIDTH
     "Block at center of canvas")
    (check-equal?
     (send block-1 sblock-y)
     CANVAS-HALF-HEIGHT
     "Block at center of canvas")
    (check-equal?
     (send block-1 for-test::block-selected?) 
     false
     "Block should be selected"))
  
  (local
    ((define block-1 (make-block CANVAS-HALF-WIDTH CANVAS-HALF-HEIGHT empty))
     (define block-2 (make-block 200 300 (list block-1)))
     (define block-3 (make-block 100 300 (list block-1 block-2)))
     (define block-4 (make-block 350 300 (list block-1 block-2 block-3))))
    (send block-1 add-neighbor (list block-2 block-3  block-4))
    (send block-2 add-neighbor (list block-1 block-3  block-4))
    (send block-3 add-neighbor (list block-1 block-2 block-4))
    (send block-4 add-neighbor (list block-1 block-2 block-3))
    
    (send block-1 after-tick)
    (send block-1 after-key-event "b")
    (check-equal?
     (send block-1 sblock-x)
     CANVAS-HALF-WIDTH
     "Block ignores tick and key event")
    (check-equal?
     (send block-1 sblock-y)
     CANVAS-HALF-HEIGHT
     "Block ignores tick and key event")
    (check-equal?
     (send block-1 for-test::block-selected?)
     false
     "Block ignores tick and key event")
    (send block-1 after-drag 300 400)
    (check-equal?
     (send block-1 sblock-x)
     300
     "Block dragged")
    (check-equal?
     (send block-1 sblock-y)
     250
     "Block dragged")
    (check-equal?
     (send block-1 for-test::block-selected?)
     false
     "Block selected")
    
    (send block-1 after-move 400 500)
    (check-equal?
     (send block-1 sblock-x) 300
     "Block moved")
    
    (send block-1 after-button-down 450 550)
    
    (check-equal?
     (send block-1 sblock-x)
     300
     "Block ignores button-down")
    (check-equal?
     (send block-1 sblock-y)
     250
    "Block ignores button-down")
    (check-equal?
     (send block-1 for-test::block-selected?)
     false
     "Block should not be selected")
    (send block-1 after-button-down CANVAS-HALF-WIDTH CANVAS-HALF-HEIGHT)
    (check-equal?
     (send block-1 sblock-x)
     CANVAS-HALF-WIDTH
     "Block changes x coordinate")
    (check-equal?
     (send block-1 sblock-y)
     CANVAS-HALF-HEIGHT
     "Block changes y coordinate")
    (check-equal?
     (send block-1 for-test::block-selected?)
     true
     "Block should be selected")
    (send block-1 after-drag 300 400)
    (check-equal?
     (send block-1 sblock-x)
     300
     "Block dragged")
    (check-equal?
     (send block-1 sblock-y)
     400
     "Block dragged")
    (check-equal?
     (send block-1 for-test::block-selected?)
     true
     "Block should be selected")
    
    (check-equal?
     (send block-1 add-to-scene EMPTY-CANVAS)
     (place-image (square 20 "outline" "red")
                  300 400 EMPTY-CANVAS))
    (send block-1 after-button-up 450 550)
    (check-equal?
     (send block-1 sblock-x)
     300
     "Block ignores button-up")
    (check-equal?
     (send block-1 sblock-y)
     400
     "Block ignores button-up")
    (check-equal?
     (send block-1 for-test::block-selected?)
     true
     "Block ignores button-up")
    (send block-1 after-button-up 300 400)
    (check-equal?
     (send block-1 sblock-x)
     300
     "Block changes x coordinate")
    (check-equal?
     (send block-1 sblock-y)
     400
     "Block changes y coordinate")
    (check-equal?
     (send block-1 for-test::block-selected?)
     false
     "Block should be unselected")
    (check-equal?
     (send block-1 add-to-scene EMPTY-CANVAS)
     (place-image (square 20 "outline" "green")
                  300 400 EMPTY-CANVAS)
     "block should be placed on the canvas")
    (send block-1 after-button-down (send block-1 sblock-x) (send block-1 sblock-y))
    (check-equal?
     (send block-1 sblock-x)
     300
     "Block ignores tick and key event")
    (send block-1 after-drag 250 300)
    
    (send block-1 after-button-up 250 300)
    (check-equal?
     (send block-1 sblock-x)
     250
     "Block changes x coordinate")
    (check-equal?
     (send block-1 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-1 for-test::block-selected?)
     false
     "Block should be unselected") 
    
    (send block-4 after-button-down 350 300)
    (check-equal?
     (send block-4 sblock-x)
     350
     "Block changes x coordinate")
    (check-equal?
     (send block-4 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-4 for-test::block-selected?)
     true "Block should be selected")
    (send block-4 after-drag 270 300)
    (check-equal?
     (send (first (send block-4 get-team)) get-sblock)
     1
     "Blocks in the team modified")
    
    (send block-4 after-button-up 270 300)
    
    (check-equal?
     (send block-4 sblock-x)
     270
     "Block changes x coordinate")
    (check-equal?
     (send block-4 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-4 for-test::block-selected?)
     false
     "Block should be unselected")
    (send block-1 after-button-down 250 300)
    
    (send block-1 after-drag 230 300)
    (check-equal?
     (length (send block-4 get-team))
     1
     "Block should not add team when not selected with leader")
    (send block-1 after-button-up 230 300)
    (check-equal?
     (send block-1 sblock-x)
     230
     "Block changes x coordinate")
    (check-equal?
     (send block-1 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-1 for-test::block-selected?)
     false
     "Block should be unselected")
    (send block-1 after-button-down 230 300)
    (check-equal?
     (send block-1 sblock-x)
     230
     "Block changes x coordinate")
    (check-equal?
     (send block-1 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-1 for-test::block-selected?)
     true
     "Block should be selected")
    (check-equal?
     (send block-2 sblock-x)
     200
     "Block changes x coordinate")
    (check-equal?
     (send block-2 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-2 for-test::block-selected?)
     false
     "Block should not be selected")
    (check-equal?
     (length (send block-1 for-test::get-sblock))
     3
     "number of blocks in list is 3")
    
    (send block-1 after-drag 220 300)
    (check-equal?
     (send block-1 sblock-x)
     220
     "Block changes x coordinate")
    (check-equal?
     (send block-1 sblock-y)
     300
     "Block changes y coordinate")
    (check-equal?
     (send block-1 for-test::block-selected?)
     true
     "Block should be selected")
    (check-equal?
     (length (send block-1 get-team))
     2)
    (send block-3 add-teammate block-1)
    (check-equal?
     (length (send block-3 get-team)) 1
     "adds given block to the team")))
